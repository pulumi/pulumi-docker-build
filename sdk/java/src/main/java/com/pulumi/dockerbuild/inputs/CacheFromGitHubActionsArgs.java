// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dockerbuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Recommended for use with GitHub Actions workflows.
 * 
 *     An action like crazy-max/ghaction-github-runtime is recommended to expose
 * appropriate credentials to your GitHub workflow.
 * 
 */
public final class CacheFromGitHubActionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheFromGitHubActionsArgs Empty = new CacheFromGitHubActionsArgs();

    /**
     * The scope to use for cache keys. Defaults to `buildkit`.
     * 
     * This should be set if building and caching multiple images in one
     * workflow, otherwise caches will overwrite each other.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope to use for cache keys. Defaults to `buildkit`.
     * 
     * This should be set if building and caching multiple images in one
     * workflow, otherwise caches will overwrite each other.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private CacheFromGitHubActionsArgs() {}

    private CacheFromGitHubActionsArgs(CacheFromGitHubActionsArgs $) {
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheFromGitHubActionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheFromGitHubActionsArgs $;

        public Builder() {
            $ = new CacheFromGitHubActionsArgs();
        }

        public Builder(CacheFromGitHubActionsArgs defaults) {
            $ = new CacheFromGitHubActionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scope The scope to use for cache keys. Defaults to `buildkit`.
         * 
         * This should be set if building and caching multiple images in one
         * workflow, otherwise caches will overwrite each other.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope to use for cache keys. Defaults to `buildkit`.
         * 
         * This should be set if building and caching multiple images in one
         * workflow, otherwise caches will overwrite each other.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public CacheFromGitHubActionsArgs build() {
            $.scope = Codegen.stringProp("scope").output().arg($.scope).def("buildkit").getNullable();
            return $;
        }
    }

}
